
给定一个二维矩阵，计算其子矩形范围内元素的总和，该子矩阵的左上角为 (row1, col1) ，右下角为 (row2, col2) 。

上图子矩阵左上角 (row1, col1) = (2, 1) ，右下角(row2, col2) = (4, 3)，该子矩形内元素的总和为 8。

matrix = [
	[3, 0, 1, 4, 2],
	[5, 6, 3, 2, 1],
	[1, 2, 0, 1, 5],
	[4, 1, 0, 1, 7],
	[1, 0, 3, 0, 5]
]

def sumRegion(row1: int, col1: int, row2: int, col2: int) -> int:
	result = 0
	for row in range(row1, row2 + 1):
		result += sum(matrix[row][col1:col2 + 1])
		print(matrix[row])
	return result

print(sumRegion(2, 1, 4, 3))


class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
        self.matrix = matrix

    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        result = 0
        for row in range(row1, row2+1):
            result += sum(self.matrix[row][col1:col2+1])
        return result

class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
        if len(matrix)<1:
            return 
        pre_sum = [[0]*(len(matrix[0])+1) for i in range(len(matrix)+1)]
        for i in range(1,len(pre_sum)):
            for j in range(1,len(pre_sum[0])):
                pre_sum[i][j]=pre_sum[i-1][j]+pre_sum[i][j-1]-pre_sum[i-1][j-1]+matrix[i-1][j-1]
        self.pre_sum = pre_sum

    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        return self.pre_sum[row2+1][col2+1]-self.pre_sum[row1][col2+1]-self.pre_sum[row2+1][col1]+self.pre_sum[row1][col1]



# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)
