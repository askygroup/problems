338. 比特位计数

给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。

# 比特位计数(方法一)
num = 5

def countBits(num):
	num_list = []
	for i in range(num + 1):
		count = 0
		for j in bin(i):
			if j == '1':
				count += 1
		num_list.append(count)
	return num_list

print(countBits(num))

# 比特位计数
num = 5

def countBits(num):
	return [bin(i).count('1') for i in range(num + 1)]

print(countBits(num))

方法二：

通过今天这个题，分析动态规划的解法是怎么推导出来的
递归
把第 i 个数分成两种情况：

如果 i 是偶数，那么它的二进制 1 的位数与 i/2 的二进制 1 的位数相等；因为偶数的二进制末尾是 0，右移一位等于 i / 2，而 1 的个数没有变化。
如果 i 是奇数，那么它的二进制 1 的位数等于 i-1 的二进制位数 +1；因为奇数的二进制末尾是 1，如果把末尾的 1 去掉就等于 i - 1。又 i-1 是偶数，所以奇数 i 的二进制 1 的位数等于 i/2 中二进制 1 的位数 +1.

# 比特位计数(方法二)
num = 5

def countBits(num):
	num_list = []
	for i in range(num + 1):
		if i == 0:
			num_list.append(0)
		elif i % 2 == 0:
			num_list.append(num_list[i // 2])
		else:
			num_list.append(num_list[i - 1] + 1)
	return num_list

print(countBits(num))

# 比特位计数(方法二)
num = 5

def countBits(num):
	num_list = [0]
	for i in range(1, num + 1):
		if i % 2 == 0:
			num_list.append(num_list[i // 2])
		else:
			num_list.append(num_list[i - 1] + 1)
	return num_list

print(countBits(num))

    def countBits(self, num: int) -> List[int]:
        result = [0] * (num + 1)
        for i in range(1, num + 1):
            result[i] = result[i & (i - 1)] + 1
			#result[i] = result[i//2] + (i&1)
        
        return result

# 比特位计数
num = 5

def countBits(num):
	bn = [0]*(num + 1)
	for i in range(num // 2 + 1):
		bn[2*i] = bn[i]
		if 2*i + 1 <= num:
			bn[2*i + 1] = bn[i] + 1
	return bn

print(countBits(num))

class Solution:
    def countBits(self, num):
        res = [0] * (num + 1)
        for i in range(1, num + 1):
            res[i] = res[i >> 1] + (i & 1)
        return res

